// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/27/2019 21:14:17"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    sodavending_mechine
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module sodavending_mechine_vlg_sample_tst(
	coin,
	reset,
	sampler_tx
);
input [1:0] coin;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(coin or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module sodavending_mechine_vlg_check_tst (
	coffee,
	sevensghund,
	sevensgten,
	sevensgzero,
	sampler_rx
);
input  coffee;
input [6:0] sevensghund;
input [6:0] sevensgten;
input [6:0] sevensgzero;
input sampler_rx;

reg  coffee_expected;
reg [6:0] sevensghund_expected;
reg [6:0] sevensgten_expected;
reg [6:0] sevensgzero_expected;

reg  coffee_prev;
reg [6:0] sevensghund_prev;
reg [6:0] sevensgten_prev;
reg [6:0] sevensgzero_prev;

reg  coffee_expected_prev;
reg [6:0] sevensghund_expected_prev;
reg [6:0] sevensgten_expected_prev;
reg [6:0] sevensgzero_expected_prev;

reg  last_coffee_exp;
reg [6:0] last_sevensghund_exp;
reg [6:0] last_sevensgten_exp;
reg [6:0] last_sevensgzero_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	coffee_prev = coffee;
	sevensghund_prev = sevensghund;
	sevensgten_prev = sevensgten;
	sevensgzero_prev = sevensgzero;
end

// update expected /o prevs

always @(trigger)
begin
	coffee_expected_prev = coffee_expected;
	sevensghund_expected_prev = sevensghund_expected;
	sevensgten_expected_prev = sevensgten_expected;
	sevensgzero_expected_prev = sevensgzero_expected;
end


// expected sevensghund[ 6 ]
initial
begin
	sevensghund_expected[6] = 1'bX;
end 
// expected sevensghund[ 5 ]
initial
begin
	sevensghund_expected[5] = 1'bX;
end 
// expected sevensghund[ 4 ]
initial
begin
	sevensghund_expected[4] = 1'bX;
end 
// expected sevensghund[ 3 ]
initial
begin
	sevensghund_expected[3] = 1'bX;
end 
// expected sevensghund[ 2 ]
initial
begin
	sevensghund_expected[2] = 1'bX;
end 
// expected sevensghund[ 1 ]
initial
begin
	sevensghund_expected[1] = 1'bX;
end 
// expected sevensghund[ 0 ]
initial
begin
	sevensghund_expected[0] = 1'bX;
end 
// expected sevensgten[ 6 ]
initial
begin
	sevensgten_expected[6] = 1'bX;
end 
// expected sevensgten[ 5 ]
initial
begin
	sevensgten_expected[5] = 1'bX;
end 
// expected sevensgten[ 4 ]
initial
begin
	sevensgten_expected[4] = 1'bX;
end 
// expected sevensgten[ 3 ]
initial
begin
	sevensgten_expected[3] = 1'bX;
end 
// expected sevensgten[ 2 ]
initial
begin
	sevensgten_expected[2] = 1'bX;
end 
// expected sevensgten[ 1 ]
initial
begin
	sevensgten_expected[1] = 1'bX;
end 
// expected sevensgten[ 0 ]
initial
begin
	sevensgten_expected[0] = 1'bX;
end 
// expected sevensgzero[ 6 ]
initial
begin
	sevensgzero_expected[6] = 1'bX;
end 
// expected sevensgzero[ 5 ]
initial
begin
	sevensgzero_expected[5] = 1'bX;
end 
// expected sevensgzero[ 4 ]
initial
begin
	sevensgzero_expected[4] = 1'bX;
end 
// expected sevensgzero[ 3 ]
initial
begin
	sevensgzero_expected[3] = 1'bX;
end 
// expected sevensgzero[ 2 ]
initial
begin
	sevensgzero_expected[2] = 1'bX;
end 
// expected sevensgzero[ 1 ]
initial
begin
	sevensgzero_expected[1] = 1'bX;
end 
// expected sevensgzero[ 0 ]
initial
begin
	sevensgzero_expected[0] = 1'bX;
end 

// expected coffee
initial
begin
	coffee_expected = 1'bX;
end 
// generate trigger
always @(coffee_expected or coffee or sevensghund_expected or sevensghund or sevensgten_expected or sevensgten or sevensgzero_expected or sevensgzero)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected coffee = %b | expected sevensghund = %b | expected sevensgten = %b | expected sevensgzero = %b | ",coffee_expected_prev,sevensghund_expected_prev,sevensgten_expected_prev,sevensgzero_expected_prev);
	$display("| real coffee = %b | real sevensghund = %b | real sevensgten = %b | real sevensgzero = %b | ",coffee_prev,sevensghund_prev,sevensgten_prev,sevensgzero_prev);
`endif
	if (
		( coffee_expected_prev !== 1'bx ) && ( coffee_prev !== coffee_expected_prev )
		&& ((coffee_expected_prev !== last_coffee_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port coffee :: @time = %t",  $realtime);
		$display ("     Expected value = %b", coffee_expected_prev);
		$display ("     Real value = %b", coffee_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_coffee_exp = coffee_expected_prev;
	end
	if (
		( sevensghund_expected_prev[0] !== 1'bx ) && ( sevensghund_prev[0] !== sevensghund_expected_prev[0] )
		&& ((sevensghund_expected_prev[0] !== last_sevensghund_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sevensghund[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sevensghund_expected_prev);
		$display ("     Real value = %b", sevensghund_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sevensghund_exp[0] = sevensghund_expected_prev[0];
	end
	if (
		( sevensghund_expected_prev[1] !== 1'bx ) && ( sevensghund_prev[1] !== sevensghund_expected_prev[1] )
		&& ((sevensghund_expected_prev[1] !== last_sevensghund_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sevensghund[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sevensghund_expected_prev);
		$display ("     Real value = %b", sevensghund_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sevensghund_exp[1] = sevensghund_expected_prev[1];
	end
	if (
		( sevensghund_expected_prev[2] !== 1'bx ) && ( sevensghund_prev[2] !== sevensghund_expected_prev[2] )
		&& ((sevensghund_expected_prev[2] !== last_sevensghund_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sevensghund[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sevensghund_expected_prev);
		$display ("     Real value = %b", sevensghund_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sevensghund_exp[2] = sevensghund_expected_prev[2];
	end
	if (
		( sevensghund_expected_prev[3] !== 1'bx ) && ( sevensghund_prev[3] !== sevensghund_expected_prev[3] )
		&& ((sevensghund_expected_prev[3] !== last_sevensghund_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sevensghund[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sevensghund_expected_prev);
		$display ("     Real value = %b", sevensghund_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sevensghund_exp[3] = sevensghund_expected_prev[3];
	end
	if (
		( sevensghund_expected_prev[4] !== 1'bx ) && ( sevensghund_prev[4] !== sevensghund_expected_prev[4] )
		&& ((sevensghund_expected_prev[4] !== last_sevensghund_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sevensghund[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sevensghund_expected_prev);
		$display ("     Real value = %b", sevensghund_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sevensghund_exp[4] = sevensghund_expected_prev[4];
	end
	if (
		( sevensghund_expected_prev[5] !== 1'bx ) && ( sevensghund_prev[5] !== sevensghund_expected_prev[5] )
		&& ((sevensghund_expected_prev[5] !== last_sevensghund_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sevensghund[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sevensghund_expected_prev);
		$display ("     Real value = %b", sevensghund_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sevensghund_exp[5] = sevensghund_expected_prev[5];
	end
	if (
		( sevensghund_expected_prev[6] !== 1'bx ) && ( sevensghund_prev[6] !== sevensghund_expected_prev[6] )
		&& ((sevensghund_expected_prev[6] !== last_sevensghund_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sevensghund[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sevensghund_expected_prev);
		$display ("     Real value = %b", sevensghund_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sevensghund_exp[6] = sevensghund_expected_prev[6];
	end
	if (
		( sevensgten_expected_prev[0] !== 1'bx ) && ( sevensgten_prev[0] !== sevensgten_expected_prev[0] )
		&& ((sevensgten_expected_prev[0] !== last_sevensgten_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sevensgten[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sevensgten_expected_prev);
		$display ("     Real value = %b", sevensgten_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sevensgten_exp[0] = sevensgten_expected_prev[0];
	end
	if (
		( sevensgten_expected_prev[1] !== 1'bx ) && ( sevensgten_prev[1] !== sevensgten_expected_prev[1] )
		&& ((sevensgten_expected_prev[1] !== last_sevensgten_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sevensgten[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sevensgten_expected_prev);
		$display ("     Real value = %b", sevensgten_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sevensgten_exp[1] = sevensgten_expected_prev[1];
	end
	if (
		( sevensgten_expected_prev[2] !== 1'bx ) && ( sevensgten_prev[2] !== sevensgten_expected_prev[2] )
		&& ((sevensgten_expected_prev[2] !== last_sevensgten_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sevensgten[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sevensgten_expected_prev);
		$display ("     Real value = %b", sevensgten_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sevensgten_exp[2] = sevensgten_expected_prev[2];
	end
	if (
		( sevensgten_expected_prev[3] !== 1'bx ) && ( sevensgten_prev[3] !== sevensgten_expected_prev[3] )
		&& ((sevensgten_expected_prev[3] !== last_sevensgten_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sevensgten[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sevensgten_expected_prev);
		$display ("     Real value = %b", sevensgten_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sevensgten_exp[3] = sevensgten_expected_prev[3];
	end
	if (
		( sevensgten_expected_prev[4] !== 1'bx ) && ( sevensgten_prev[4] !== sevensgten_expected_prev[4] )
		&& ((sevensgten_expected_prev[4] !== last_sevensgten_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sevensgten[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sevensgten_expected_prev);
		$display ("     Real value = %b", sevensgten_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sevensgten_exp[4] = sevensgten_expected_prev[4];
	end
	if (
		( sevensgten_expected_prev[5] !== 1'bx ) && ( sevensgten_prev[5] !== sevensgten_expected_prev[5] )
		&& ((sevensgten_expected_prev[5] !== last_sevensgten_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sevensgten[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sevensgten_expected_prev);
		$display ("     Real value = %b", sevensgten_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sevensgten_exp[5] = sevensgten_expected_prev[5];
	end
	if (
		( sevensgten_expected_prev[6] !== 1'bx ) && ( sevensgten_prev[6] !== sevensgten_expected_prev[6] )
		&& ((sevensgten_expected_prev[6] !== last_sevensgten_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sevensgten[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sevensgten_expected_prev);
		$display ("     Real value = %b", sevensgten_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sevensgten_exp[6] = sevensgten_expected_prev[6];
	end
	if (
		( sevensgzero_expected_prev[0] !== 1'bx ) && ( sevensgzero_prev[0] !== sevensgzero_expected_prev[0] )
		&& ((sevensgzero_expected_prev[0] !== last_sevensgzero_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sevensgzero[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sevensgzero_expected_prev);
		$display ("     Real value = %b", sevensgzero_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sevensgzero_exp[0] = sevensgzero_expected_prev[0];
	end
	if (
		( sevensgzero_expected_prev[1] !== 1'bx ) && ( sevensgzero_prev[1] !== sevensgzero_expected_prev[1] )
		&& ((sevensgzero_expected_prev[1] !== last_sevensgzero_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sevensgzero[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sevensgzero_expected_prev);
		$display ("     Real value = %b", sevensgzero_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sevensgzero_exp[1] = sevensgzero_expected_prev[1];
	end
	if (
		( sevensgzero_expected_prev[2] !== 1'bx ) && ( sevensgzero_prev[2] !== sevensgzero_expected_prev[2] )
		&& ((sevensgzero_expected_prev[2] !== last_sevensgzero_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sevensgzero[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sevensgzero_expected_prev);
		$display ("     Real value = %b", sevensgzero_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sevensgzero_exp[2] = sevensgzero_expected_prev[2];
	end
	if (
		( sevensgzero_expected_prev[3] !== 1'bx ) && ( sevensgzero_prev[3] !== sevensgzero_expected_prev[3] )
		&& ((sevensgzero_expected_prev[3] !== last_sevensgzero_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sevensgzero[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sevensgzero_expected_prev);
		$display ("     Real value = %b", sevensgzero_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sevensgzero_exp[3] = sevensgzero_expected_prev[3];
	end
	if (
		( sevensgzero_expected_prev[4] !== 1'bx ) && ( sevensgzero_prev[4] !== sevensgzero_expected_prev[4] )
		&& ((sevensgzero_expected_prev[4] !== last_sevensgzero_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sevensgzero[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sevensgzero_expected_prev);
		$display ("     Real value = %b", sevensgzero_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sevensgzero_exp[4] = sevensgzero_expected_prev[4];
	end
	if (
		( sevensgzero_expected_prev[5] !== 1'bx ) && ( sevensgzero_prev[5] !== sevensgzero_expected_prev[5] )
		&& ((sevensgzero_expected_prev[5] !== last_sevensgzero_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sevensgzero[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sevensgzero_expected_prev);
		$display ("     Real value = %b", sevensgzero_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sevensgzero_exp[5] = sevensgzero_expected_prev[5];
	end
	if (
		( sevensgzero_expected_prev[6] !== 1'bx ) && ( sevensgzero_prev[6] !== sevensgzero_expected_prev[6] )
		&& ((sevensgzero_expected_prev[6] !== last_sevensgzero_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sevensgzero[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sevensgzero_expected_prev);
		$display ("     Real value = %b", sevensgzero_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sevensgzero_exp[6] = sevensgzero_expected_prev[6];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module sodavending_mechine_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [1:0] coin;
reg reset;
// wires                                               
wire coffee;
wire [6:0] sevensghund;
wire [6:0] sevensgten;
wire [6:0] sevensgzero;

wire sampler;                             

// assign statements (if any)                          
sodavending_mechine i1 (
// port map - connection between master ports and signals/registers   
	.coffee(coffee),
	.coin(coin),
	.reset(reset),
	.sevensghund(sevensghund),
	.sevensgten(sevensgten),
	.sevensgzero(sevensgzero)
);

// reset
initial
begin
	reset = 1'b1;
	reset = #20000 1'b0;
end 
// coin[ 1 ]
initial
begin
	coin[1] = 1'b0;
	coin[1] = #100000 1'b1;
	coin[1] = #50000 1'b0;
	coin[1] = #50000 1'b1;
	coin[1] = #50000 1'b0;
	coin[1] = #100000 1'b1;
	coin[1] = #50000 1'b0;
	coin[1] = #300000 1'b1;
	coin[1] = #50000 1'b0;
	coin[1] = #50000 1'b1;
end 
// coin[ 0 ]
initial
begin
	coin[0] = 1'b0;
	coin[0] = #250000 1'b1;
	coin[0] = #50000 1'b0;
	coin[0] = #150000 1'b1;
	coin[0] = #50000 1'b0;
	coin[0] = #50000 1'b1;
	coin[0] = #100000 1'b0;
	coin[0] = #50000 1'b1;
	coin[0] = #50000 1'b0;
	coin[0] = #50000 1'b1;
	coin[0] = #100000 1'b0;
	coin[0] = #50000 1'b1;
end 

sodavending_mechine_vlg_sample_tst tb_sample (
	.coin(coin),
	.reset(reset),
	.sampler_tx(sampler)
);

sodavending_mechine_vlg_check_tst tb_out(
	.coffee(coffee),
	.sevensghund(sevensghund),
	.sevensgten(sevensgten),
	.sevensgzero(sevensgzero),
	.sampler_rx(sampler)
);
endmodule

